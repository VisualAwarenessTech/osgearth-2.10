// Copyright (c) 1994-2013 Georgia Tech Research Corporation, Atlanta, GA
// This file is part of FalconView(tm).

// FalconView(tm) is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// FalconView(tm) is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with FalconView(tm).  If not, see <http://www.gnu.org/licenses/>.

// FalconView(tm) is a trademark of Georgia Tech Research Corporation.
// 2014-2015 GAJ Geospatial Enterprises, Orlando FL
// Modified for General Incorporation of Common Database (CDB) support within osgEarth
// 2016-2017 Visual Awareness Technologies and Consulting Inc. St Petersburg FL

// CDBOptions
//

#ifndef OSGEARTH_DRIVERS_CDBOPTIONS
#define OSGEARTH_DRIVERS_CDBOPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;

	class CDBOptions : public TileSourceOptions // NO EXPORT; header only
	{
	public:
		optional<std::string>& rootDir() { return _rootDir; }
		const optional<std::string>& rootDir() const { return _rootDir; }
		optional<std::string>& cacheDir() { return _cacheDir; }
		const optional<std::string>& cacheDir() const { return _cacheDir; }
		optional<std::string>& Limits() { return _Limits; }
		const optional<std::string>& Limits() const { return _Limits; }
		optional<int>& MaxCDBLevel() { return _MaxCDBLevel; }
		const optional<int>& MaxCDBLevel() const { return _MaxCDBLevel; }
		optional<int>& NumNegLODs() { return _NumNegLODs; }
		const optional<int>& NumNegLODs() const { return _NumNegLODs; }
		optional<bool>& DisableBathemetry() { return _Disable_Bathyemtry; }
		const optional<bool>& DisableBathemetry() const { return _Disable_Bathyemtry; }
		optional<bool>& Verbose() { return _Verbose; }
		const optional<bool>& Verbose() const { return _Verbose; }
		optional<bool>& LightMap() { return _Enable_Subord_Light; }
		const optional<bool>& LightMap() const { return _Enable_Subord_Light; }
		optional<bool>& Materials() { return _Enable_Subord_Material; }
		const optional<bool>& Materials() const { return _Enable_Subord_Material; }
		optional<bool>& MaterialMask() { return _Enable_Subord_MaterialMask; }
		const optional<bool>& MaterialMask() const { return _Enable_Subord_MaterialMask; }
		optional<int>& tileSize() { return _tileSize; }
		const optional<int>& tileSize() const { return _tileSize; }
	public:
        CDBOptions( const TileSourceOptions& opt = TileSourceOptions() )
           : TileSourceOptions( opt )
        {
            setDriver( "cdb" );
            fromConfig( _conf );
        }

        /** dtor */
        virtual ~CDBOptions() { }

    public:
        Config getConfig() const
        {
            Config conf = TileSourceOptions::getConfig();
			conf.set("root_dir", _rootDir);
			conf.set("cache_dir", _cacheDir);
			conf.set("limits", _Limits);
			conf.set("maxcdblevel", _MaxCDBLevel);
			conf.set("num_neg_lods", _NumNegLODs);
			conf.set("disablebathyemetry", _Disable_Bathyemtry);
			conf.set("verbose", _Verbose);
			conf.set("lightmap", _Enable_Subord_Light);
			conf.set("materials", _Enable_Subord_Material);
			conf.set("materialmask", _Enable_Subord_MaterialMask);
			conf.set("tile_size", _tileSize);
			return conf;
        }

    protected:
        void mergeConfig( const Config& conf )
        {
            TileSourceOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf )
        {
			conf.get("root_dir", _rootDir);
			conf.get("cache_dir", _cacheDir);
			conf.get("limits", _Limits);
			conf.get("maxcdblevel", _MaxCDBLevel);
			conf.get("num_neg_lods", _NumNegLODs);
			conf.get("disablebathyemetry", _Disable_Bathyemtry);
			conf.get("verbose", _Verbose);
			conf.get("lightmap", _Enable_Subord_Light);
			conf.get("materials", _Enable_Subord_Material);
			conf.get("materialmask", _Enable_Subord_MaterialMask);
			conf.get("tile_size", _tileSize);
		}

        optional<std::string> _rootDir;
		optional<std::string> _Limits;
		optional<std::string> _cacheDir;
		optional<int>  _MaxCDBLevel;
		optional<int>  _NumNegLODs;
		optional<bool> _Disable_Bathyemtry;
		optional<bool> _Verbose;
		optional<bool> _Enable_Subord_Light;
		optional<bool> _Enable_Subord_Material;
		optional<bool> _Enable_Subord_MaterialMask;
		optional<int>  _tileSize;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVERS_CDBOPTIONS

